/**
* packetcapture API generated from packetcapture.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


<<<<<<< HEAD
#include "Packet.h"
#include "Packetcapture.h"
#include <locale>
#include <codecvt>
#include <string>


Packet::Packet(Packetcapture &parent, const PacketJsonObject &conf)
    : PacketBase(parent), capture_len(0), packet_len(0), ts_microsec(0), ts_sec(0) {
=======
// TODO: Modify these methods with your own implementation


#include "Packet.h"
#include "Packetcapture.h"


Packet::Packet(Packetcapture &parent, const PacketJsonObject &conf)
    : PacketBase(parent) {
>>>>>>> Data model and packetcapture stub created
  if (conf.capturelenIsSet()) {
    setCapturelen(conf.getCapturelen());
  }

  if (conf.packetlenIsSet()) {
    setPacketlen(conf.getPacketlen());
  }

  if (conf.timestampSecondsIsSet()) {
    setTimestampSeconds(conf.getTimestampSeconds());
  }

  if (conf.timestampMicrosecondsIsSet()) {
    setTimestampMicroseconds(conf.getTimestampMicroseconds());
  }

}

<<<<<<< HEAD

Packet::~Packet() {}

uint32_t Packet::getCapturelen() {
  return this->capture_len;
}

void Packet::setCapturelen(const uint32_t &value) {
  this->capture_len = value;
}

uint32_t Packet::getPacketlen() {
  return this->packet_len;
}

void Packet::setPacketlen(const uint32_t &value) {
  this->packet_len = value;
}

uint32_t Packet::getTimestampSeconds() {
  return this->ts_sec;
}

void Packet::setTimestampSeconds(const uint32_t &value) {
  this->ts_sec = value;
}

uint32_t Packet::getTimestampMicroseconds() {
  return this->ts_microsec;
}

void Packet::setTimestampMicroseconds(const uint32_t &value) {
  this->ts_microsec = value;
}

void Packet::setRawPacketData(const std::vector<uint8_t> &input){
  this->packet = input;
}

std::vector<uint8_t> Packet::getRawPacketData(){
  return this->packet;
}

std::string ascii_to_utf8(const std::vector<uint8_t> &packet){
  std::string ret("");
  char ch;

  for(int i = 0 ; i < packet.size(); i++){
    if(packet[i] < 128){
      ret.push_back((char) packet[i]);
    }else{
      ch = (char) packet[i];
      ret.push_back((char)((packet[i] >> 6) | 0xC0));
      ret.push_back((ch & 0x3F) | 0x80);
    }
  }

  return ret;
}

std::string Packet::getRawdata() {
  return ascii_to_utf8(packet);
}

void Packet::setRawdata(const std::string &value) {
  throw std::runtime_error("Packet::setRawdata: Method not implemented");
}
=======
Packet::~Packet() {}

uint32_t Packet::getCapturelen() {
  throw std::runtime_error("Packet::getCapturelen: Method not implemented");
}

void Packet::setCapturelen(const uint32_t &value) {
  throw std::runtime_error("Packet::setCapturelen: Method not implemented");
}

uint32_t Packet::getPacketlen() {
  throw std::runtime_error("Packet::getPacketlen: Method not implemented");
}

void Packet::setPacketlen(const uint32_t &value) {
  throw std::runtime_error("Packet::setPacketlen: Method not implemented");
}

uint32_t Packet::getTimestampSeconds() {
  throw std::runtime_error("Packet::getTimestampSeconds: Method not implemented");
}

void Packet::setTimestampSeconds(const uint32_t &value) {
  throw std::runtime_error("Packet::setTimestampSeconds: Method not implemented");
}

uint32_t Packet::getTimestampMicroseconds() {
  throw std::runtime_error("Packet::getTimestampMicroseconds: Method not implemented");
}

void Packet::setTimestampMicroseconds(const uint32_t &value) {
  throw std::runtime_error("Packet::setTimestampMicroseconds: Method not implemented");
}


>>>>>>> Data model and packetcapture stub created
