/**
* packetcapture API generated from packetcapture.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


#include "Packetcapture.h"
#include "Packetcapture_dp.h"

typedef int bpf_int32; 
typedef u_int bpf_u_int32;

/** File format
 *  Global Header-Packet Header-Packet Data-Packet Header-Packet Data-Packet Header-Packet Data-...
 * https://wiki.wireshark.org/Development/LibpcapFileFormat#Libpcap_File_Format */

/** structures
 * https://www.winpcap.org/docs/docs_412/html/incs_2pcap_8h_source.html#l00126 */

/** Linktype
 *  https://linux.die.net/man/7/pcap-linktype */


struct pcap_file_header {
  bpf_u_int32 magic;      /* magic number */
  u_short version_major;  /* major version number */
  u_short version_minor;  /* minor version number */
  bpf_int32 thiszone;     /* GMT to local correction */
  bpf_u_int32 sigfigs;    /* accuracy of timestamps */
  bpf_u_int32 snaplen;    /* max length of captured packets, in octets */
  bpf_u_int32 linktype;   /* data link type */
};

struct pcap_pkthdr {
  struct timeval ts;  
  bpf_u_int32 caplen; /* number of octets of packet saved in file */
  bpf_u_int32 len;    /* actual length of packet */
};

Packetcapture::Packetcapture(const std::string name, const PacketcaptureJsonObject &conf)
  : TransparentCube(conf.getBase(), { packetcapture_code }, {}),
    PacketcaptureBase(name) {
  logger()->info("Creating Packetcapture instance");
  /*  setCapture(conf.getCapture());
    setAnomimize(conf.getAnomimize());
  if (conf.linktypeIsSet()) {
    setLinktype(conf.getLinktype());
  }

  if (conf.dumpIsSet()) {
    setDump(conf.getDump());
  }
  */
  //auto value = conf.getFilters();
  addFilters(conf.getFilters());
  /*auto value = conf.getPacket();
  addPacket(conf.getPacket());*/
}


Packetcapture::~Packetcapture() {
  logger()->info("Destroying Packetcapture instance");
}

void Packetcapture::packet_in(polycube::service::Sense sense,
    polycube::service::PacketInMetadata &md,
    const std::vector<uint8_t> &packet) {
    logger()->debug("Packet received - packet_in. Packet size= {0}", packet.size());
    //logger()->debug("valore in metadata: {0}", md.metadata[0]);  //testing - 5?
    
    //non posso scambiare puntatori, devo utilizzare le mappe condivise per scambiare i dati fra fast e control path
    packetHeaders pkt_values = get_array_table<packetHeaders>("pkt_header").get(0x0);
    //logger()->debug("mac sorgente ricevuto: {0}", (int)pkt_values.srcMac);

}

PacketcaptureCaptureEnum Packetcapture::getCapture() {
  throw std::runtime_error("Packetcapture::getCapture: Method not implemented");
}

void Packetcapture::setCapture(const PacketcaptureCaptureEnum &value) {
  throw std::runtime_error("Packetcapture::setCapture: Method not implemented");
}

bool Packetcapture::getAnomimize() {
  throw std::runtime_error("Packetcapture::getAnomimize: Method not implemented");
}

void Packetcapture::setAnomimize(const bool &value) {
  throw std::runtime_error("Packetcapture::setAnomimize: Method not implemented");
}

uint32_t Packetcapture::getLinktype() {
  throw std::runtime_error("Packetcapture::getLinktype: Method not implemented");
}

void Packetcapture::setLinktype(const uint32_t &value) {
  throw std::runtime_error("Packetcapture::setLinktype: Method not implemented");
}

std::string Packetcapture::getDump() {
  throw std::runtime_error("Packetcapture::getDump: Method not implemented");
}

void Packetcapture::setDump(const std::string &value) {
  throw std::runtime_error("Packetcapture::setDump: Method not implemented");
}

std::shared_ptr<Filters> Packetcapture::getFilters() {
  return filters;
}

void Packetcapture::addFilters(const FiltersJsonObject &value) {
  filters = std::shared_ptr<Filters>(new Filters(*this, value));
}

// Basic default implementation, place your extension here (if needed)
void Packetcapture::replaceFilters(const FiltersJsonObject &conf) {
  // call default implementation in base class
  PacketcaptureBase::replaceFilters(conf);
}

void Packetcapture::delFilters() {
  throw std::runtime_error("Packetcapture::delFilters: method not implemented");
}

std::shared_ptr<Packet> Packetcapture::getPacket() {
  throw std::runtime_error("Packetcapture::getPacket: Method not implemented");
}

void Packetcapture::addPacket(const PacketJsonObject &value) {
  throw std::runtime_error("Packetcapture::addPacket: Method not implemented");
}

// Basic default implementation, place your extension here (if needed)
void Packetcapture::replacePacket(const PacketJsonObject &conf) {
  // call default implementation in base class
  PacketcaptureBase::replacePacket(conf);
}

void Packetcapture::delPacket() {
  throw std::runtime_error("Packetcapture::delPacket: method not implemented");
}


void Packetcapture::attach() {
  logger()->info("attached");
}
