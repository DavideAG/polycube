/**
* packetcapture API generated from packetcapture.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* PacketcaptureBase.h
*
*
*/

#pragma once

#include "../serializer/PacketcaptureJsonObject.h"

#include "../Filters.h"
<<<<<<< HEAD
#include "../Globalheader.h"
=======
>>>>>>> Data model and packetcapture stub created
#include "../Packet.h"

#include "polycube/services/transparent_cube.h"



#include "polycube/services/utils.h"
#include "polycube/services/fifo_map.hpp"

#include <spdlog/spdlog.h>

using namespace polycube::service::model;


class PacketcaptureBase: public virtual polycube::service::TransparentCube {
 public:
  PacketcaptureBase(const std::string name);
  
  virtual ~PacketcaptureBase();
  virtual void update(const PacketcaptureJsonObject &conf);
  virtual PacketcaptureJsonObject toJsonObject();

  /// <summary>
  /// Packet capture status
  /// </summary>
  virtual PacketcaptureCaptureEnum getCapture() = 0;
  virtual void setCapture(const PacketcaptureCaptureEnum &value) = 0;

  /// <summary>
  ///
  /// </summary>
  virtual bool getAnomimize() = 0;
  virtual void setAnomimize(const bool &value) = 0;

  /// <summary>
<<<<<<< HEAD
  /// dump capture
  /// </summary>
  virtual std::string getDump() = 0;
  virtual void setDump(const std::string &value) = 0;

  /// <summary>
  /// operative mode
  /// </summary>
  virtual bool getNetworkmode() = 0;
  virtual void setNetworkmode(const bool &value) = 0;
=======
  /// Capture linktype (eg. ethernet, wifi..)
  /// </summary>
  virtual uint32_t getLinktype() = 0;
  virtual void setLinktype(const uint32_t &value) = 0;

  /// <summary>
  /// dump capture
  /// </summary>
  virtual std::string getDump() = 0;
  virtual void setDump(const std::string &value) = 0;
>>>>>>> Data model and packetcapture stub created

  /// <summary>
  ///
  /// </summary>
  virtual std::shared_ptr<Filters> getFilters() = 0;
  virtual void addFilters(const FiltersJsonObject &value) = 0;
  virtual void replaceFilters(const FiltersJsonObject &conf);
  virtual void delFilters() = 0;

  /// <summary>
  ///
  /// </summary>
<<<<<<< HEAD
  virtual std::shared_ptr<Globalheader> getGlobalheader() = 0;
  virtual void addGlobalheader(const GlobalheaderJsonObject &value) = 0;
  virtual void replaceGlobalheader(const GlobalheaderJsonObject &conf);
  virtual void delGlobalheader() = 0;

  /// <summary>
  ///
  /// </summary>
=======
>>>>>>> Data model and packetcapture stub created
  virtual std::shared_ptr<Packet> getPacket() = 0;
  virtual void addPacket(const PacketJsonObject &value) = 0;
  virtual void replacePacket(const PacketJsonObject &conf);
  virtual void delPacket() = 0;
};
