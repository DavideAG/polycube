/**
* packetcapture API generated from packetcapture.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


#include "Filters.h"
#include "Packetcapture.h"


Filters::Filters(Packetcapture &parent, const FiltersJsonObject &conf)
    : FiltersBase(parent), set_dstIp(false), set_srcIp(false), set_dstPort(false), set_srcPort(false), set_l4proto(false) {

  if (conf.snaplenIsSet()) {
    setSnaplen(conf.getSnaplen());
  }

  if (conf.srcIsSet()) {
    setSrc(conf.getSrc());
  }

  if (conf.dstIsSet()) {
    setDst(conf.getDst());
  }

  if (conf.l4protoIsSet()) {
    setL4proto(conf.getL4proto());
  }

  if (conf.sportIsSet()) {
    setSport(conf.getSport());
  }

  if (conf.dportIsSet()) {
    setDport(conf.getDport());
  }

  snaplen = 262144;
}

Filters::~Filters() {}

uint32_t Filters::getSnaplen() {
  return snaplen;
}

void Filters::setSnaplen(const uint32_t &value) {
  set_snaplen = true;
  snaplen = value;
}

std::string Filters::getSrc() {
  return srcIp;
}

void Filters::setSrc(const std::string &value) {
  set_srcIp = true;
  srcIp = value;
}

std::string Filters::getDst() {
  return dstIp;
}

void Filters::setDst(const std::string &value) {
  set_dstIp = true;
  dstIp = value;
}

std::string Filters::getL4proto() {
  return l4proto;
}

void Filters::setL4proto(const std::string &value) {
  set_l4proto = true;
  if((value.compare(std::string("tcp")) == 0) || (value.compare(std::string("udp")) == 0))
    l4proto = value;
  else
    throw std::runtime_error("Bad value at setL4proto. Please enter 'tcp' or 'udp'");
}

uint16_t Filters::getSport() {
  return this->srcPort;
}

void Filters::setSport(const uint16_t &value) {
  set_srcPort = true;
  srcPort = value;
}

uint16_t Filters::getDport() {
  return dstPort;
}

void Filters::setDport(const uint16_t &value) {
  set_dstPort = true;
  dstPort = value;
}
