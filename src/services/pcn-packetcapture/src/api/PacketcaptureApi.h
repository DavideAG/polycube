/**
* packetcapture API generated from packetcapture.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* PacketcaptureApi.h
*
*/

#pragma once

#define POLYCUBE_SERVICE_NAME "packetcapture"


#include "polycube/services/response.h"
#include "polycube/services/shared_lib_elements.h"

#include "FiltersJsonObject.h"
#include "PacketJsonObject.h"
#include "PacketcaptureJsonObject.h"
#include <vector>


#ifdef __cplusplus
extern "C" {
#endif

Response create_packetcapture_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response create_packetcapture_filters_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response create_packetcapture_packet_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response delete_packetcapture_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response delete_packetcapture_filters_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response delete_packetcapture_packet_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_packetcapture_anomimize_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_packetcapture_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_packetcapture_capture_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_packetcapture_dump_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_packetcapture_filters_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_packetcapture_filters_dport_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_packetcapture_filters_dst_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_packetcapture_filters_l4proto_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_packetcapture_filters_snaplen_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_packetcapture_filters_sport_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_packetcapture_filters_src_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_packetcapture_linktype_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_packetcapture_list_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_packetcapture_packet_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_packetcapture_packet_capturelen_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_packetcapture_packet_packetlen_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_packetcapture_packet_timestamp_microseconds_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_packetcapture_packet_timestamp_seconds_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response replace_packetcapture_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response replace_packetcapture_filters_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response replace_packetcapture_packet_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_packetcapture_anomimize_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_packetcapture_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_packetcapture_capture_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_packetcapture_dump_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_packetcapture_filters_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_packetcapture_filters_dport_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_packetcapture_filters_dst_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_packetcapture_filters_l4proto_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_packetcapture_filters_snaplen_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_packetcapture_filters_sport_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_packetcapture_filters_src_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_packetcapture_linktype_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_packetcapture_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_packetcapture_packet_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_packetcapture_packet_capturelen_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_packetcapture_packet_packetlen_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_packetcapture_packet_timestamp_microseconds_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_packetcapture_packet_timestamp_seconds_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);

Response packetcapture_list_by_id_help(const char *name, const Key *keys, size_t num_keys);


#ifdef __cplusplus
}
#endif

