/**
* packetcapture API generated from packetcapture.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


#pragma once

#include <list>

#include "../base/PacketcaptureBase.h"

#include "Filters.h"
#include "Packet.h"

#include <tins/ethernetII.h>
#include <tins/tins.h>


struct packetHeaders {
  uint64_t srcMac;
  uint64_t dstMac;
  uint16_t vlan;
  bool vlan_present;
  bool ip;
  uint32_t srcIp;
  uint32_t dstIp;
  uint8_t l4proto;
  uint16_t srcPort;
  uint16_t dstPort;
};

using namespace polycube::service::model;

class Packetcapture : public PacketcaptureBase {
 
 struct packetHeaders *pkt_ptr;
 std::shared_ptr<Filters> filters;
 std::list<Packet> capture;
 
  bool filtering(const packetHeaders &pkt_values);

 public:
  Packetcapture(const std::string name, const PacketcaptureJsonObject &conf);
  virtual ~Packetcapture();

  void packet_in(polycube::service::Sense sense,
                 polycube::service::PacketInMetadata &md,
                 const std::vector<uint8_t> &packet) override;

  void attach() override;

  /// <summary>
  /// Packet capture status
  /// </summary>
  PacketcaptureCaptureEnum getCapture() override;
  void setCapture(const PacketcaptureCaptureEnum &value) override;

  /// <summary>
  ///
  /// </summary>
  bool getAnomimize() override;
  void setAnomimize(const bool &value) override;

  /// <summary>
  /// Capture linktype (eg. ethernet, wifi..)
  /// </summary>
  uint32_t getLinktype() override;
  void setLinktype(const uint32_t &value) override;

  /// <summary>
  /// dump capture
  /// </summary>
  std::string getDump() override;
  void setDump(const std::string &value) override;

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Filters> getFilters() override;
  void addFilters(const FiltersJsonObject &value) override;
  void replaceFilters(const FiltersJsonObject &conf) override;
  void delFilters() override;

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Packet> getPacket() override;
  void addPacket(const PacketJsonObject &value) override;
  void replacePacket(const PacketJsonObject &conf) override;
  void delPacket() override;
};
